{"version":3,"sources":["serviceWorker.js","TodoItem.js","actions.js","TodoList.js","App.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoItem","react_default","a","createElement","className","this","props","completed","type","defaultChecked","onClick","handleToggleTodo","title","handleDeleteTodo","Component","TOGGLE_TODO","ADD_TODO","DELETE_TODO","CLEAR_COMPLETED_TODO","TodoList","_this","console","log","path","todos","map","todo","src_TodoItem","key","id","event","connect","state","ownProps","filter","dispatch","todoId","payload","App","handleAddNewTodo","keyCode","addNewTodo","target","value","placeholder","autoFocus","onKeyDown","Switch","Route","exact","render","src_TodoList","Link","to","handleDeleteCompletedTodos","todoTitle","initialState","reducer","arguments","length","undefined","action","newTodos","Object","objectSpread","toConsumableArray","concat","userId","Math","floor","random","store","createStore","ReactDOM","es","BrowserRouter","basename","process","src_App_0","pathname","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.424fa52a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\n\nclass TodoItem extends Component {\n    render() {\n      return (\n        <li className={this.props.completed ? \"completed\" : \"\"}>\n          <div className=\"view\">\n            <input\n              className=\"toggle\"\n              type=\"checkbox\"\n              defaultChecked={this.props.completed}\n              onClick={this.props.handleToggleTodo}\n            />\n            <label>{this.props.title}</label>\n            <button className=\"destroy\" onClick={this.props.handleDeleteTodo} />\n          </div>\n        </li>\n      );\n    }\n  }\n  \n  export default TodoItem;\n","// what import statements do I need here?\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const CLEAR_COMPLETED_TODO = 'CLEAR_COMPLETED_TODO';\n\nexport function toggleTodo(id) {\n    return {\n        type: TOGGLE_TODO,\n        payload: id\n    }\n};\n\nexport function addTodo(title){\n    return {\n        type:ADD_TODO,\n        payload: title\n    }\n};\n\nexport function deleteTodo(id){\n    return {\n        type:DELETE_TODO,\n        payload: id\n    }\n};\n\nexport function clearCompletedTodo(id){\n    return {\n        type:CLEAR_COMPLETED_TODO,\n    }\n};","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { connect } from 'react-redux';\nimport { toggleTodo } from \"./actions\";\nimport { deleteTodo } from \"./actions\";\n\nclass TodoList extends Component {\n  render() {\n    console.log(this.props.path)\n    return (\n      <ul className=\"todo-list\">\n\n        {this.props.todos.map(todo => (\n          <TodoItem\n            title={todo.title}\n            key={todo.id}\n            completed={todo.completed}\n            handleToggleTodo={(event) => this.props.handleToggleTodo(todo.id)}\n            handleDeleteTodo={(event) => this.props.handleDeleteTodo(todo.id)}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport const mapStateToProps = (state, ownProps) => {\n  switch (ownProps.path){\n    case \"/\": \n      return {todos: state.todos}\n    \n    case \"/active\":\n      return{ todos: state.todos.filter(todo => !todo.completed)}\n    \n    case \"/completed\": \n      return { todos: state.todos.filter(todo => todo.completed)}\n    \n    default:\n      return {todos: state.todos}\n  }\n\n  return { \n    todos: state.todos,\n  }\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n\n    handleToggleTodo: (todoId) => dispatch(toggleTodo(todoId)),\n    handleDeleteTodo: (todoId) => dispatch(deleteTodo(todoId))\n  }\n\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoList);","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport TodoList from \"./TodoList\";\nimport { addTodo } from \"./actions\";\nimport { clearCompletedTodo } from \"./actions\";\n// curly braces indicate you want to import a named export\n\nclass App extends Component {\n  // added to reducer already.\n  // handleToggleTodo = todoIdThatWasClicked () => {\n  //   const newTodos = this.state.todos.map(todo => {\n  //     if (todo.id === todoIdThatWasClicked) {\n  //       todo.completed = !todo.completed;\n  //     }\n  //     return todo;\n  //   });\n\n  //   this.setState({\n  //     todos: newTodos\n  //   });\n  // };\n\n  // handleDeleteCompletedTodos = event => {\n  //   const newTodos = this.state.todos.filter(todo => {\n  //     if (todo.completed === true) {\n  //       return false;\n  //     }\n  //     return true;\n  //   });\n  //   this.setState({\n  //     todos: newTodos\n  //   });\n  // };\n\n  // handleDeleteTodo = todoIdThatWasClicked => event => {\n  //   const newTodos = this.state.todos.filter(todo => {\n  //     if (todo.id === todoIdThatWasClicked) {\n  //       return false;\n  //     }\n  //     return true;\n  //   });\n  //   this.setState({\n  //     todos: newTodos\n  //   });\n  // };\n\n  handleAddNewTodo = event => {\n    if (event.keyCode === 13) {\n      this.props.addNewTodo(event.target.value)\n      event.target.value = \"\";\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            onKeyDown={this.handleAddNewTodo}\n\n          />\n        </header>\n        <section className=\"main\">\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={props => (\n                <TodoList\n                  path ='/'\n                />\n              )}\n            />\n            <Route\n              path={\"/active\"}\n              render={props => (\n                <TodoList\n                  path=\"/active\" />\n              )}\n\n            />\n            <Route\n              path={\"/completed\"}\n              render={props => (\n                <TodoList\n                  path=\"/completed\"\n                />\n              )}\n            />\n          </Switch>\n        </section>\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>0</strong> item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li className=\"sublink\">\n              <Link to=\"/\">All</Link>\n            </li>\n            <li className=\"sublink\">\n              <Link to=\"/active\">Active</Link>\n            </li>\n            <li className=\"sublink\">\n              <Link to=\"/completed\">Completed</Link>\n            </li>\n          </ul>\n          <button\n            className=\"clear-completed\"\n            onClick={this.props.handleDeleteCompletedTodos}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport const mapStateToProps = (state) => {\n  return { \n    active: state.todos\n    \n  }\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    addNewTodo: (todoTitle) => dispatch(addTodo(todoTitle)),\n    handleDeleteCompletedTodos:() => dispatch(clearCompletedTodo())\n    \n  }\n};\n\nexport default connect(null,mapDispatchToProps)(App);","import todoList from \"./todos.json\";\nimport { TOGGLE_TODO } from \"./actions\";\nimport { ADD_TODO } from \"./actions\";\nimport { DELETE_TODO } from \"./actions\";\nimport { CLEAR_COMPLETED_TODO } from \"./actions\";\n\nexport const initialState = {\n  todos: todoList\n};\n\nexport function reducer(state = initialState, action) {\n  console.log(action)\n  switch (action.type) {\n    case TOGGLE_TODO:\n      const newTodos = state.todos.map(todo => {\n        if (todo.id === action.payload) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      return {\n        ...state,\n        todos: newTodos\n      };\n\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            userId: 1,\n            id: Math.floor(Math.random() * 30938409834) + 1,\n            title: action.payload,\n            completed: false\n          }\n        ]\n      };\n\n    case DELETE_TODO:\n      \n      return {\n        ...state,\n        todos: state.todos.filter(todo => {\n          if (todo.id === action.payload) {\n            return false;\n          }\n          return true;\n        })\n      };\n\n    case CLEAR_COMPLETED_TODO:\n  \n      return {\n        ...state,\n        todos: state.todos.filter(todo => {\n          if (todo.completed === true) {\n            return false;\n          }\n          return true;\n        })\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from 'redux';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer);\n \nconst Index = () =>{\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    < Route render={props => <App path={props.location.pathname}/>} />\n    </BrowserRouter>\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <Index />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n\n\n// const Index = () =>{\n//   return <Provider store={store}>\n//       <App />\n//   </Provider>\n// }\n// ReactDOM.render(\n// <BrowserRouter basename={process.env.PUBLIC_URL}>\n//   <Index />\n// </BrowserRouter>,\n// document.getElementById(\"root\")\n// );\n// serviceWorker.unregister();"],"sourceRoot":""}