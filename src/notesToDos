Action type constants should be defined with names TOGGLE_TODO, ADD_TODO, DELETE_TODO, CLEAR_COMPLETED_TODOS. Action type constants should be in a separate file, actions.js

Action creator functions should be defined with names toggleTodo, addTodo, deleteTodo, clearCompletedTodos. Each action creator function should return an action object with the correct action type constant. Action creator functions should be in a separate file, actions.js

The reducer function should take two arguments, state and action. The state parameter should also have a default parameter value of initialState (defined by you). The implementation of the reducer function should use a switch statement. The switch statement should include a default case which returns the existing state. The reducer function should be in a separate file, reducer.js

There should be cases for each of the action type constants. Additionally, each of those cases should follow immutability practices by modifying only copies of state and then returning the new modified copy.

The store should be created by passing the reducer to the createStore method from redux. The application should have the <Provider> component nested directly within the <BrowserRouter> component on index.js. The store should be passed as a prop to the Provider component likes so: <Provider store={store}>

Every component that needs state from Redux should have a mapStateToProps function created at the bottom of the component that dictates which parts of state that it wants mapped to its props. This will look like the following: export default connect(mapStateToProps, mapDispatchToProps)(ComponentName)

Every component that needs to fire an action in Redux should have a mapDispatchToProps function created at the bottom of the component that includes dispatch functions that will dispatch an action creator. This will look like the following export default connect(mapStateToProps, mapDispatchToProps)(ComponentName)